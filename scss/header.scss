// (c) Yuoa
// NOTE don't put "transition" property in %controlable!
// NOTE don't use "transition" property on basic layout!
// NOTE Writing order
//        1. @extend, @include (without reactives/responsibles), basic styles
//        2. @mixin / %extend / &states / &pseudo
//        3. tags / ids / classes / &tags / &ids / &classes
//        4. @include (reactives/responsibles)

@import 'common';

// Variables - Overall
$width: 100%;
$height: 450px;
$minuscule-power: 0.6;
$narrow-power: 0.7;
$small-power: 0.9;

// Variables - Controlable
$control-height: 80px;
$float-height: 70px;
$float-padding: 10px;

// Variables - Buttonbox
$button-width: 36px;
$button-box-width: $button-width * 4;
$button-each-width: $button-width - 1px;
$button-radius-range: 1.3;
$button-font-size: 1rem;

// Variables - Navigator
$menu-padding: 1vw;
$menu-vertical-padding: .5vw;
$menu-font-size: 1.3rem;
$menu-inner-padding: 1vw;
$menu-inner-font-size: 1rem;

// Mixins
@mixin above {
    position: absolute;
    z-index: 20;
}
@mixin below {
    position: absolute;
    z-index: 10;
}
@mixin full {
    width: $width;
    height: $height;
}

// Codes
header#top {
    @include full;
    position: relative;
    box-shadow: 0 0 10px $black-t;
    margin-bottom: 1vw;

    %controlable {
        @include above;
        height: $control-height;
        top: $vt-padding;
        margin: 0;

        @include when(minuscule) {
            height: $control-height * $minuscule-power;
            top: $vt-padding * $minuscule-power;
        }
        @include when(narrow) {
            height: $control-height * $narrow-power;
            top: $vt-padding * $narrow-power;
        }
        @include when(small) {
            height: $control-height * $small-power;
            top: $vt-padding * $small-power;
        }
    }

    &.float {
        .identity {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: $float-height - 2 * $float-padding;
            padding: $float-padding 0;
            background-color: $dblue-lt;
            box-shadow: 0 0 5px $black-t;

            img {
                margin: 0 $hz-padding;
                max-height: $float-height - 2 * $float-padding;

                @include when(minuscule) { margin: 0 $hz-padding-minuscule; }
                @include when(narrow) { margin: 0 $hz-padding-narrow; }
                @include when(vast) { margin: 0 $hz-padding-vast; }
            }

            .normal { @include hide; }
            .float { @include show; }
        }

        .navigator {
            position: fixed;
            margin-top: calc(#{-1 * $control-height / 2} - #{$menu-font-size / 2});
        }

        .button-box {
            position: fixed;
            margin-top: calc(#{-1 * $control-height / 2 + 2px} - #{$menu-font-size / 2});

            @include when(minuscule) {
                margin-top: calc((#{-1 * $control-height / 2 + 2px} - #{$menu-font-size / 2}) * #{$minuscule-power} + 14px);
            }
            @include when(narrow) {
                margin-top: calc((#{-1 * $control-height / 2 + 2px} - #{$menu-font-size / 2}) * #{$narrow-power} + 10px);
            }
            @include when(small) {
                margin-top: calc((#{-1 * $control-height / 2 + 2px} - #{$menu-font-size / 2}) * #{$small-power} + 4px);
            }
        }
    }

    a, h1, p, span, img { color: white; }

    .identity {
        @extend %controlable;
        left: $hz-padding;

        img { height: 100%; }

        .float { @include hide; }

        @include when(minuscule) { left: $hz-padding-minuscule; }
        @include when(narrow) { left: $hz-padding-narrow; }
        @include when(vast) { left: $hz-padding-vast; }
    }

    .navigator {
        @extend %controlable;
        right: $hz-padding;
        padding-right: $button-box-width + 10px;

        &::after {
            // TODO NEXT START POINT (TO IMPLEMENT OPENING MENU)
            @include hide;
            content: '×';
            width: $button-each-width;
            height: $button-each-width;
        }

        a { margin: 0; }
        ul { list-style: none; }
        ul, li { margin: 0; padding: 0; }

        & > ul {
            // NOTE
            // margin-top = Controlable half - Menu element height half
            margin-top: calc(#{$control-height / 2} - #{$menu-font-size / 2} - #{$menu-vertical-padding / 2});

            & > li {
                display: inline-block;
                position: relative;
                margin-left: $menu-padding;

                &:hover, &:active, &:focus, &:focus-within {
                    & > a { background-color: $dblue-lt; }
                    & > ul { @include show(opacity); }
                }

                & > a {
                    font-size: $menu-font-size;
                    transition: background-color .2s;
                    padding: $menu-vertical-padding 1vw;

                    @include when(minuscule) { line-height: $control-height * $minuscule-power; }
                    @include when(narrow) { line-height: $control-height * $narrow-power; }
                    @include when(small) { line-height: $control-height * $small-power; }
                }

                & > ul {
                    @include hide(opacity);
                    position: absolute;
                    top: calc(#{$menu-font-size} + #{$menu-vertical-padding * 2});
                    left: 0;
                    width: max-content;
                    min-width: 10rem;
                    padding: #{$menu-inner-padding} 0 #{$menu-inner-padding / 2};
                    background-color: $dblue-lt;
                    font-size: $menu-font-size;
                    transition: opacity .2s;

                    & > li {
                        &:hover, &:active, &:focus, &:focus-within {
                            background-color: white;

                            & > ul { @include show(opacity); }
                            & > a { color: $dblue; }
                        }

                        & > a {
                            @include no-underline;
                            padding: #{$menu-inner-padding / 4} 3.5rem #{$menu-inner-padding / 4} #{$menu-inner-padding};
                            font-size: $menu-inner-font-size;
                            font-weight: 500;
                            display: block;
                            min-height: calc(#{$menu-inner-font-size} + #{$menu-inner-padding / 2});
                        }

                        & > ul {
                            @include hide(opacity);
                            position: absolute;
                            background-color: white;
                            top: 0;
                            left: 100%;
                            min-height: calc(100% - #{$menu-inner-padding * 2});
                            min-width: 13rem;
                            width: max-content;
                            padding: $menu-inner-padding;

                            & > li > a {
                                color: $dblue;
                                font-size: $menu-inner-font-size;
                                font-weight: 400;
                            }
                        }
                    }
                }
            }
        }

        @include when(minuscule) { right: $hz-padding-minuscule; }
        @include when(narrow) { right: $hz-padding-narrow; }
        @include under(medium) { @include hide; }
        @include when(vast) {
            // NOTE
            // 7.5em = Expand Menu + Search & 메뉴 펼치기 + 검색
            // 10px = 5px is added to both side of the box when the labels are exposed.
            padding-right: calc(#{$button-box-width} + #{$menu-padding} + 7.5em + 10px);
            right: $hz-padding-vast;
        }
    }

    .button-box {
        @extend %controlable;
        right: $hz-padding;
        display: table;

        button {
            @include button-engraved (white, $dblue);
            display: table-cell;
            width: $button-each-width;
            height: $button-each-width;
            margin-top: ($control-height - $button-width) / 2;
            font-size: $button-font-size;
            line-height: $button-each-width;

            @mixin button-radius ($direction) {
                padding-#{$direction}: $button-each-width * ($button-radius-range - 1) * .5;
                width: $button-each-width * $button-radius-range;
                border-top-#{$direction}-radius: #{$button-each-width / 2};
                border-bottom-#{$direction}-radius: #{$button-each-width / 2};
            }

            @mixin expand {
                width: initial !important;

                a {
                    svg, img { padding-left: 12px; }
                    span { padding-right: 12px; }
                }
            }

            a {
                @include no-underline;

                svg, img {
                    width: $button-each-width - 15px;
                    height: $button-each-width - 15px;

                    &:not(.no-label) { padding: 7px; }
                }

                span {
                    line-height: $button-each-width - 2px;
                    vertical-align: top;
                    margin: 0;
                }
            }

            &:first-child { @include button-radius(left); }
            &:last-child { @include button-radius(right); }

            @include when(minuscule) {
                @include button-embossed(white, $dblue, transparent);
                margin-top: ($control-height * $minuscule-power - $button-width) / 2;
            }
            @include when(narrow) {
                margin-top: ($control-height * $narrow-power - $button-width) / 2;
            }
            @include when(small) {
                margin-top: ($control-height * $small-power - $button-width) / 2;
            }
            @include when(medium) { @include expand; }
            @include over(large) { &.search { @include button-radius(right); } }
            @include when(vast) { @include expand; }
        }

        .expand {
            @include under(medium) { @include hide; }
        }

        .menu {
            @include hide;
            @include under(medium) { @include show; }
        }

        @include when(minuscule) { right: $hz-padding-minuscule; }
        @include when(narrow) { right: $hz-padding-narrow; }
        @include when(vast) { right: $hz-padding-vast; }
    }

    .slider {
        @include below;
        @include full;
        top: 0;
        left: 0;
        display: inline-grid;

        .slide {
            @include full;
            position: absolute;
            background-position: 50% 40%;
            background-repeat: no-repeat;
            background-size: cover;

            &::before {
                @include below;
                @include full;
                top: 0;
                left: 0;
                background-color: $dblue-t;
                content: '';
            }

            .text-box {
                @include above;
                padding: 0 $hz-padding;
                bottom: $vt-padding;

                h1 { margin: 0; }
                a { font-weight: 300; }

                @include when(minuscule) {
                    padding: 0 $hz-padding-minuscule;
                    bottom: $vt-padding * $minuscule-power;
                }
                @include when(narrow) {
                    padding: 0 $hz-padding-narrow;
                    bottom: $vt-padding * $narrow-power;
                }
                @include when(small) { bottom: $vt-padding * $small-power; }
                @include when(vast) { padding: 0 $hz-padding-vast; }
            }
        }
    }
}
